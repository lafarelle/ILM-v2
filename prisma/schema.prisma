generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model Forum {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String @unique
  description String?
  isDefault   Boolean @default(false)

  posts Post[]

  @@map("forums")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String
  imageUrl String? // URL de l'image uploadée

  // Auteur (peut être anonyme)
  isAnonymous Boolean @default(false)
  authorName  String? // Nom personnalisé pour les posts anonymes
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  forumId String?
  forum   Forum?  @relation(fields: [forumId], references: [id], onDelete: SetNull)

  reports  Report[]
  comments Comment[]
  likes    PostLike[]

  @@map("posts")
}

model Report {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  reporterId String
  reporter   User   @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@unique([postId, reporterId])
  @@map("reports")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  role          UserRole  @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?

  sessions     Session[]
  accounts     Account[]
  posts        Post[]
  reports      Report[]
  comments     Comment[]
  commentLikes CommentLike[]
  postLikes    PostLike[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime

  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id        String    @id @default(uuid())
  createdAt DateTime?
  updatedAt DateTime?

  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  // Support pour commentaires hiérarchiques (threading Reddit-style)
  parentId String?
  parent   Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[] @relation("CommentReplies")

  // Auteur (peut être anonyme)
  isAnonymous Boolean @default(false)
  authorName  String? // Nom personnalisé pour les commentaires anonymes
  userId      String?
  user        User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Système de likes pour commentaires
  likes CommentLike[]

  @@map("comments")
}

model CommentLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model PostLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("post_likes")
}

